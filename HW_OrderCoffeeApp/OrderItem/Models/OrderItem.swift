//
//  OrderModels.swift
//  HW_OrderCoffeeApp
//
//  Created by 曹家瑋 on 2024/7/2.
//

// MARK: - 測試問題
/*
 
 ## 測試的時候發現，我如果沒有依照新添加飲品項目的順序去刪除的話，會導致無法正常刪除項目。##
 
 A. 原先沒有使用 UUID 的問題
 
    * 基於陣列索引：
        - 由於基於陣列索引來定位和操作訂單飲品項目。導致訂單的順序發生變化時（EX: 刪除、插入新的訂單飲品，陣列索引會改變，導致錯誤更新）
 
    * 操作複雜性：
        - 陣列索引的變化會使操作變複雜，尤其是在需要頻繁增刪改訂單飲品的狀況下。需要額外的邏輯處理來維護正確的索引。

 --------------------------------------------------------------------------------------------------------
 
 B. 使用 UUID 的改進
 
    * 唯一ID：
        - 每個訂單飲品項嗎度有一個 UUID，確保在增刪改時準確定位到正確的項目，不受陣列順序變化的影響。
 
    * 操作簡便：
        - 直接通過 UUID 查找和操作訂單飲品項目，不需要擔心索引變化帶來的問題，提高操作簡便性。
 
 --------------------------------------------------------------------------------------------------------

 C. 使用 let 定義 id，而不是var。
 
    * 唯一性：
        - id 通常作為唯一，一但分配後就不該更改。使用 let 確保 id 在整個生命週期中保持不變。
 
    * 安全性：
        - 不可變對象更容易推理、測試。使用 let 防止意外修改 id，減少淺在錯誤。
  
 --------------------------------------------------------------------------------------------------------

 ## 筆記：
 
    - OrderItem 用於記錄單個飲品的資訊，如飲品種類、尺寸、數量、準備時間、價格等。
    - totalAmount 是單項飲品的總價（即 price * quantity），方便在訂單中計算總額。
    - timestamp 用於追蹤這個飲品項目加入訂單的時間，不過考慮到這個屬性可能與整體訂單時間戳記重複，目前先移除掉。
 
 */


// MARK: - OrderItem 筆記
/**
 
 ## OrderItem 筆記

 ---

 `* What`
 
 - `OrderItem` 是一個用於描述訂單單項飲品的結構，包含該飲品的詳細資料、訂購資訊以及計算結果。以下是它的主要屬性：

 1. 唯一標識符：
 
    - `id`：每個訂單項目都有一個唯一的 UUID，便於在操作（例如更新或刪除）時進行區分。

 2. 飲品資料：
 
    - `drink`：包含飲品的詳細資訊（例如名稱、可選尺寸及價格等）。

 3. 訂購資訊：
 
    - `size`：飲品的尺寸（例如小杯、中杯、大杯）。
    - `quantity`：訂購的飲品數量。

 4. 計算數據：
 
    - `prepTime`：準備該飲品所需的時間（以分鐘為單位）。
    - `price`：單項飲品的單價（基於飲品尺寸計算）。
    - `totalAmount`：該飲品的總金額（單價乘以數量）。

 ---------------

 `* Why`

 1. 結構化訂單項目：
 
    - 使用結構來清楚定義訂單中的單項飲品資料，讓每筆訂單的數據更加清晰與易於管理。

 2. 支持訂單操作：
 
    - 每個訂單項目都有唯一的 `id`，可以方便地進行新增、刪除、或更新操作。
    - 包含尺寸與數量等屬性，便於快速計算金額與準備時間。

 3. 減少重複邏輯：
 
    - 每個屬性都能直接提供訂單項目的關鍵資料（例如金額與時間），避免在其他地方重複計算這些資訊。

 4. 便於擴展性：
 
    - `OrderItem` 結構是訂單管理功能的基礎，未來可以根據需求添加更多屬性（例如促銷資訊或標籤）以支援更多業務場景。

 ---------------

 `* How`

 1. 初始化 `OrderItem`：
 
    - 當新增一個訂單項目時，會根據選擇的飲品、尺寸、數量等資料來初始化一個 `OrderItem`。
    - 自動生成唯一的 `id` 來區分每個訂單項目。

 2. 計算金額：
 
    - 在初始化時，即根據飲品單價與數量計算該項目的 `totalAmount`，不需在其他地方重複計算。

 3. 支持比對與儲存：
 
    - 遵循 `Codable` 協議，可輕鬆進行編碼與解碼，便於與 Firebase 或其他資料庫交互。
    - 遵循 `Equatable` 和 `Hashable` 協議，允許在集合中使用（例如用於刪除或判斷項目是否存在）。

 ---------------

 `* 適用場景`

 1. 訂單管理：
 
    - 在新增、修改、或刪除訂單時，`OrderItem` 提供了清晰的結構化數據。

 2. 界面展示：
 
    - UI 層可直接使用 `OrderItem` 中的屬性來顯示飲品名稱、尺寸、數量、金額及準備時間。

 3. 數據運算：
 
    - 計算整體訂單金額與準備時間時，可通過匯總多個 `OrderItem` 的屬性輕鬆完成。
 */


import Foundation

/// 訂單`項目`結構，描述訂單中的單個飲品項目
struct OrderItem: Codable, Equatable, Hashable {
    let id: UUID                          // 唯一標識符，用於區分每個訂單項目（方便更新、刪除等操作）
    var drink: Drink                      // 飲品詳細資料
    var size: String                      // 飲品的尺寸（例如小杯、中杯、大杯）
    var quantity: Int                     // 飲品的數量
    var prepTime: Int                     // 以分鐘為單位（基於飲品去設置準備時間，而不是尺寸）
    var totalAmount: Int                  // 單項飲品的總金額（單價乘以數量）
    var price: Int                        // 單項飲品的價格

    // 在初始化時，UUID 會自動產生。
    init(drink: Drink, size: String, quantity: Int, prepTime: Int, totalAmount: Int, price: Int) {
        self.id = UUID()
        self.drink = drink
        self.size = size
        self.quantity = quantity
        self.prepTime = prepTime
        self.totalAmount = totalAmount
        self.price = price
    }
}
