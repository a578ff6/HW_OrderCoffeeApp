//
//  SearchNetworkMonitor.swift
//  HW_OrderCoffeeApp
//
//  Created by 曹家瑋 on 2024/11/23.
//

// MARK: - 筆記：NWPathMonitor 的用途與操作
/**
 
 ## 筆記：NWPathMonitor 的用途與操作

 `* 網路狀態監控概述`
 
 - 在網路狀態監控中，通常最關心的就是「是否有網路連線」，因此常見的網路監控場景主要關注 `.satisfied`（表示網路正常）與 `.unsatisfied`（表示無網路）的狀態。

 -----
 
 `* NWPath.Status 的三種狀態`

 1. `.satisfied` - 表示網路可用且連線良好。
 2. `.unsatisfied` - 表示網路不可用。
 3. `.requiresConnection`- 表示網路目前不可用，但可能需要某些額外的操作來建立連線，例如使用者需要手動連接 Wi-Fi 或接受某些驗證頁面。

 -----

 `* 常見監控場景`

 `1. 只監控 .satisfied 與 .unsatisfied`
 
 - 在一般 App ，我們主要關心網路是否正常可用，因此只需要監控 `.satisfied` 與 `.unsatisfied` 就足夠。
 - 當網路狀態從 `.unsatisfied` 變為 `.satisfied` 時，可以進行網路操作，例如加載數據。這樣可以避免網路無法使用時發起不必要的請求，影響使用者體驗。

  `2. .requiresConnection 的應用場景`
 
 - `.requiresConnection` 通常會出現在需要使用者進一步操作才能建立網路連線的情況。
  
    - 使用者連接到某些公共 Wi-Fi 時，可能需要進行認證或登錄頁面操作，這種情況下，網路狀態會是 `.requiresConnection`。
    - 如果應用需要在這種情況下發起連線，應提示使用者手動完成連接操作。

 -----

 `* 在 SearchNetworkMonitor 中的應用`
 
 - 在 `SearchNetworkMonitor` 的實作中，主要是監控網路狀態以進行數據加載，只關注 `.satisfied` 和 `.unsatisfied` 是最有效率的方式。
 - 只需要知道網路是否可用以決定是否發起請求時，這樣的設置通常足夠。

 這樣的監控可以讓應用在網路正常時進行數據加載，而在網路不可用或需要進一步操作時，避免發起請求，從而提供更好的使用者體驗。
 */


// MARK: - 重試邏輯與重新加載資料：What、Why、How
/**
 
 ## 重試邏輯與重新加載資料：What、Why、How

` * 具體案例`
 
 - 在開發過程中，我遇到了一個具體的例子：
 - 當使用者進行飲品搜尋時，如果飲品資料無效且網路中斷，原本系統會嘗試自動重試下載資料。
 - 但是在網路不穩定的情況下，反覆的自動重試導致使用者體驗變差，因為 App 會反覆進行重試卻無法成功完成操作。
 - 這樣的設計並沒有給使用者明確的控制權，反而讓整個加載過程顯得冗長且不可預測。
 - 這引發了用戶的困惑，特別是在網路不穩定且無法立即恢復的情況下。
 - 再加上在設計流程的時候將「重試邏輯」與「重新加載資料」的職責給搞混，導致兩者的運作會互相排擠。
 
 - 因此，我選擇將邏輯調整為更直接的方式「`控制權給使用者`」：
    -  當「飲品資料無效」時，只要網路狀態不佳，就會立即向使用者顯示警示，並讓他們決定是否嘗試重試或取消。
    - 這樣可以讓使用者在面對網路問題時更清楚當前的狀態，也能選擇等待更好的網路環境再行操作，從而提升了整體的使用者體驗。
 
 ------------------------------------------------------------------
 
 `* 原本的流程`
 
 ```
 搜尋 —— 有資料 ——> 可搜尋
    |
    +--- 飲品資料無效 --> showRetryAlert --------> 點擊重試 ---- 有網路 ----> 資料加載成功有資料 --> 可搜尋
                              |                    |
                              +---> 點擊取消         +-- 無網路 --> 自動重試 --> 直到重試上限 --> 顯示 Alert，請確認網路連接
 ```
 
 ------------------------------------------------------------------

 `* What: 什麼是「重試」與「重新加載資料」？`

 - `重試邏輯`：
    - 當操作失敗後，系統自動重新嘗試完成這個操作。
    - 例如，當網路恢復後，自動重試下載資料的動作。
 
 - `重新加載資料`：
    - 「搜尋」的時候，當「飲品快取資料」無效時，會出現「Alert」提示「飲品資料無效」，此時需要依賴網路狀態，如果「網路有問題」就會加載失敗，並出現「網路有問題」的Alert。
    - 網路不好時出現 Alert 告知網路無效等訊息，讓使用者自行選擇何時要重新加載飲品資料。
 
 - 這兩者的差別在於「自動 vs. 手動」：
    - 重試是系統自動進行的行為，而重新加載資料則是給使用者的選擇。

 ------------------------------------------------------------------

 `* Why: 為什麼要區分「重試」與「重新加載資料」？`

 - `避免混淆`：
    - 一開始的設計中，重試邏輯和重新加載資料的操作容易混淆。把它們區分開來，可以更清楚地理解每個行為的目的。
 
 - `簡化流程，給予使用者控制權`：
    - 讓使用者決定何時重新加載資料，而不是由系統自動重試，有助於減少應用的複雜性並提升用戶體驗。
    - 這樣可以避免不必要的重試操作，尤其是在網路狀況不佳的情況下，反覆重試可能導致更多錯誤，影響用戶體驗。
 
 - `避免重試的複雜性`：
    - 如果系統自動重試太多次，不僅浪費資源，還可能讓應用顯得效率不佳。讓使用者手動選擇是否重試，可以提升他們的控制感。

 ------------------------------------------------------------------

 `* How: 如何應用這些邏輯？`

 `1. 使用 SearchNetworkMonitor 監控網路狀態`：
    - 當網路狀態變成 "`unsatisfied`"，表示網路不穩定或斷開，直接向使用者顯示提示，說明需要穩定的網路。
    - 提供「重試」和「取消」選項。

 `2. 重試按鈕行為：`
    - 當使用者點擊「重試」，確認網路恢復後再重新加載飲品資料。
    - 如果網路仍然不可用，則顯示提示，請使用者確認網路狀態。

 ------------------------------------------------------------------

 `* 更新後的流程圖`

 ```
 搜尋 —— 有資料 ——> 可搜尋
    |
    +--- 飲品資料無效 --> showDataUnavailableAlert --------> 點擊重試 ---- 有網路 ----> 資料加載成功有資料 --> 可搜尋
                              |                    |
                              +---> 點擊取消         +-- 無網路 --> 顯示 Alert，請確認網路連接
 ```

 - 當飲品資料無效時，顯示重試的 Alert，讓使用者選擇是否重試。
 - 使用者點擊重試時，檢查網路狀態：
   - 有網路：重新加載資料。
   - 無網路：顯示網路不可用的提示，等待使用者手動重試。

 ------------------------------------------------------------------

 `* 總結`

 - `簡單明瞭`：在網路狀況不佳時，直接告知使用者需要穩定的網路，減少自動重試帶來的複雜度。
 - `控制權交給使用者`：讓使用者決定是否要重試，避免頻繁的自動重試操作。
 - 這樣的設計不僅提升了系統的穩定性，也讓使用者對於網路狀況和操作有更好的理解與掌控。
 */


// MARK: - 筆記：SearchNetworkMonitor 的用途與操作
/**
 
 ## 筆記：SearchNetworkMonitor 的用途與操作
 
 - https://reurl.cc/V06g4Y

` * What:`
 
 - `SearchNetworkMonitor` 是一個用於監控網路狀態變化的類別。
 - 它可以持續檢測當前設備的網路連線情況，並透過回呼方法 (`onStatusChange`) 通知外部當網路狀態發生變化。

 -------
 
 `* Why:`
 
 - 在開發需要與網路互動的應用時，了解當前的網路狀態非常重要，特別是在進行`資料加載`的操作時。
 - 使用 SearchNetworkMonitor 可以有效應對網路狀況變化，例如當網路中斷時避免發起不必要的請求，在網路恢復後再進行資料加載操作，確保資料的正確性與使用者體驗。
 - 對於本地快取資料的應用場景，如果本地快取資料失效（`例如超過了時效性或首次啟動未成功加載`），則需要重新從網路抓取資料，而這時網路狀態就變得非常關鍵。

 -------

 `* How:`
 
 `1. 開始監控網路狀態`

 - `startMonitoring()`: 當應用開始需要監控網路狀態時，可以呼叫這個方法啟動網路監控。
 - 它會啟動一個監控器，並且在每次網路狀態變化時，透過 `onStatusChange` 回呼來通知外部使用者網路的狀態（例如 .satisfied 表示網路正常）。
 
 `2.停止監控網路狀態`

 - `stopMonitoring():` 當應用程式不再需要監控網路狀態時，可以呼叫此方法停止網路監控，避免浪費資源。
 
 `3.應用場景：`
 
 `* 網路狀態變化通知`
 
 - 在搜尋時，通常是直接透過本地快取資料進行查詢，所以在無網路的情況下也能夠完成搜尋。
 - 但如果本地快取的飲品資料無效（例如超過有效時效或首次啟動未成功加載），則需要重新從 Firebase 抓取資料，此時會使用 SearchNetworkMonitor 來檢查網路狀態。
 - 當搜尋時發現本地快取資料無效並且需要重新加載時，如果網路正常就會進行資料加載；如果網路不通，則顯示警告並告知使用者需要穩定的網路。

 `4.範例應用：`
 
 `* 搜尋本地快取資料`
 
 - 使用者進行搜尋時，直接從本地快取中查找資料，不會依賴網路。
 - 只要本地快取的飲品資料有效，即使在無網路的狀態下，也能進行正常搜尋。
 
 `* 飲品資料無效時的處理`
 
 - 當搜尋時發現本地快取的飲品資料無效（例如首次啟動未成功加載或快取過期），會出現一個 Alert 提醒使用者。
 - 使用者可以選擇「重試」來嘗試重新加載飲品資料。如果選擇重試，這時候會依賴網路狀態，通過 SearchNetworkMonitor 檢查網路是否恢復正常：
    - 如果網路恢復正常，進行資料重新加載。
    - 如果網路依然不可用，則再次提醒使用者網路不通的狀況，等待使用者手動決定是否重試。
 */


// MARK: - 重點筆記：關於資料加載與網路狀態監控的職責分離（未來可以考慮）
/**
 
 ## 重點筆記：關於資料加載與網路狀態監控的職責分離（未來可以考慮）
   
 `1.背景問題：資料重複加載`
 
 - 當網路狀態不穩定（例如斷網並立即恢復）時，容易多次觸發資料加載操作，導致重複請求，增加不必要的網路流量，且影響用戶體驗。
 
 -------

 `2.解決方案：使用 isLoadingData 標誌`

 - 在資料加載過程中引入 isLoadingData 標誌：
 - 當進行資料加載時，將 isLoadingData 設為 true，避免多次重複加載。
 - 當資料加載完成或失敗後，將 isLoadingData 設回 false。
 - 在每次開始資料加載前檢查 isLoadingData，如果為 true 則不再執行新的加載操作。
 
 -------

 `3.職責分離的原則`

 - `SearchNetworkMonitor`：僅負責 網路狀態監控 和通知外部系統網路狀態的變化，保持單一職責原則（Single Responsibility Principle），使其簡單且專注。
 - `SearchViewController`：負責處理搜尋邏輯，包括 決定何時進行資料加載。因此， isLoadingData 的檢查和資料加載的控制應該在 SearchViewController 中進行。
 
 -------

 `4.設計優勢`

 - `避免重複加載`：利用 isLoadingData 防止在不穩定網路下多次重複加載資料，特別是在網路狀態頻繁變化時。
 - `職責分離`： SearchNetworkMonitor 專注於網路狀態監控，而 SearchViewController 負責資料加載決策，這樣每個類都只專注於自己的職責，代碼更清晰，容易維護和擴展。
 
 -------

 `5.具體實現建議`

 - 在 SearchViewController 中增加 isLoadingData 屬性來管理資料加載狀態。
 - 在資料加載開始和結束時，正確設置 isLoadingData 的值。
 - 在網路狀態變化回調（來自 SearchNetworkMonitor）中，由 SearchViewController 決定是否加載資料。
 */


import UIKit
import Network

/// `SearchNetworkMonitor` 用於監控網路狀態，並通知外部觀察者網路連線的變化。
class SearchNetworkMonitor {
    
    // MARK: - Properties

    /// 網路狀態監控器，負責監控網路連線狀態的變化。
    private let monitor = NWPathMonitor()
    
    /// 使用全域佇列來執行網路狀態監控。
    private let queue = DispatchQueue.global()
    
    /// 當網路狀態變化時的回調
    var onStatusChange: ((NWPath.Status) -> Void)?

    // MARK: - Public Methods

    /// 開始監控網路狀態
    ///
    /// - 說明：啟動網路狀態監控，並在網路狀態變化時通知外部。
    func startMonitoring() {
        monitor.start(queue: queue)
        print("[SearchNetworkMonitor] 網路狀態監控已啟動...")
        monitor.pathUpdateHandler = { [weak self] path in
            guard let self = self else { return }
            print("[SearchNetworkMonitor] 網路狀態更新: \(path.status)")
            self.onStatusChange?(path.status)
        }
    }
    
    /// 停止監控網路狀態
    ///
    /// - 說明：取消網路狀態監控。
    func stopMonitoring() {
        monitor.cancel()
        print("[SearchNetworkMonitor] 停止網路狀態監控")
    }
    
}
